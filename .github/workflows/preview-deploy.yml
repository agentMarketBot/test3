name: Deploy Preview

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number for preview deployment'
        required: true
        type: string
      channel_id:
        description: 'Firebase hosting channel ID'
        required: true
        type: string
      github_repo:
        description: 'The repository where the PR was opened.'
        required: true
        type: string
      head_repo:
        description: 'The repository of the head commit.'
        required: true
        type: string
      head_ref:
        description: 'The ref of the head commit.'
        required: true
        type: string
      gh_pat:
        description: 'GitHub PAT for commenting on PRs'
        required: true
        type: string
      room_id:
        description: 'Room ID for updating implementation records'
        required: false
        type: string

jobs:
  deploy_preview:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.head_repo }}
          ref: ${{ inputs.head_ref }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check for package.json and install dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "package.json found, installing dependencies..."
            if [ -f "package-lock.json" ] || [ -f "yarn.lock" ] || [ -f "npm-shrinkwrap.json" ]; then
              echo "Lock file found, using npm ci"
              npm ci
            else
              echo "No lock file found, using npm install"
              npm install
            fi
          else
            echo "No package.json found, creating basic React project structure..."
            npm init -y
            npm install react react-dom @types/react @types/react-dom typescript
            
            # Create basic project structure
            mkdir -p src public
            
            # Create basic package.json scripts
            npm pkg set scripts.start="serve -s build"
            npm pkg set scripts.build="tsc && mkdir -p build && cp -r public/* build/ && cp -r src/* build/"
            npm pkg set scripts.test="echo 'No tests specified'"
            
            # Install serve for serving static files
            npm install --save-dev serve typescript
            
            echo "Basic project structure created"
          fi

      - name: Create firebase.json if not exists
        run: |
          if [ ! -f "firebase.json" ]; then
            echo "Creating firebase.json for hosting configuration..."
            cat > firebase.json << 'EOF'
          {
            "hosting": {
              "public": "build",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ]
            }
          }
          EOF
            echo "firebase.json created successfully"
          else
            echo "firebase.json already exists"
          fi

      - name: Build project
        run: |
          # Always ensure build directory exists
          mkdir -p build
          
          # Try to run the build script if package.json exists
          if [ -f "package.json" ]; then
            echo "package.json found, attempting to build..."
            if npm run build 2>/dev/null; then
              echo "‚úÖ Build completed successfully"
              # Verify build directory has content
              if [ "$(ls -A build 2>/dev/null)" ]; then
                echo "‚úÖ Build directory contains files"
              else
                echo "‚ö†Ô∏è Build directory is empty, creating fallback content..."
                cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>Build completed but no output found. Add your project files to customize this deployment.</p>
              </div>
          </body>
          </html>
          EOF
              fi
            else
              echo "‚ùå Build script failed or not found, creating fallback content..."
              cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>No build script found. Add your project files to customize this deployment.</p>
              </div>
          </body>
          </html>
          EOF
            fi
          else
            echo "No package.json found, creating basic preview page..."
            cat > build/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Preview Deployment</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .container { max-width: 600px; margin: 0 auto; }
                  h1 { color: #333; }
                  p { color: #666; line-height: 1.6; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ Preview Deployment Successful!</h1>
                  <p>Your repository has been successfully deployed to Firebase Hosting.</p>
                  <p>This is a basic preview for a new repository. Add your project files to customize this deployment.</p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Final verification
          echo "üìÅ Build directory contents:"
          ls -la build/
          echo "‚úÖ Build directory ready for deployment"

      - name: Deploy to Firebase Hosting Channel
        id: firebase_deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.VIBETOGETHER_FIREBASE_SA }}
          channelId: ${{ inputs.channel_id }}
          projectId: vibetogether-app

      - name: Install firebase-admin for GitHub script
        run: npm install firebase-admin

      - name: Store Preview URL in Firebase Storage
        uses: actions/github-script@v7
        env:
          VIBETOGETHER_FIREBASE_SA: ${{ secrets.VIBETOGETHER_FIREBASE_SA }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const admin = require('firebase-admin');
            const original_repo = "${{ inputs.github_repo }}".split('/');
            const pr_number = parseInt("${{ inputs.pr_number }}");
            const channel_id = "${{ inputs.channel_id }}";
            
            // Try to get preview URL from Firebase deployment output
            let preview_url = "${{ steps.firebase_deploy.outputs.details_url }}";
            
            if (!preview_url) {
              // Fallback to using the main URL output
              preview_url = "${{ steps.firebase_deploy.outputs.url }}";
            }
            
            if (!preview_url) {
              // Final fallback: construct URL manually
              const project_id = 'vibetogether-app';
              preview_url = `https://${project_id}--${channel_id}-${Math.random().toString(36).substr(2, 8)}.web.app`;
              console.log('Using constructed preview URL as fallback:', preview_url);
            }
            
            console.log('Preview URL:', preview_url);
            
            // Log the preview URL information
            console.log('='.repeat(60));
            console.log('üöÄ PREVIEW DEPLOYMENT SUCCESSFUL');
            console.log('='.repeat(60));
            console.log(`üìÑ Repository: ${original_repo.join('/')}`);
            console.log(`üîß PR Number: #${pr_number}`);
            console.log(`üè∑Ô∏è  Channel ID: ${channel_id}`);
            console.log(`üåê Preview URL: ${preview_url}`);
            console.log(`‚è∞ Deployed At: ${new Date().toISOString()}`);
            console.log('='.repeat(60));
            
            // Set the preview URL as a step output for potential use by other steps
            console.log(`::set-output name=preview_url::${preview_url}`);
            
            // Update the implementation record in Firestore with the preview URL
            const roomId = '${{ inputs.room_id }}';
            if (roomId && roomId.trim()) {
              try {
                const admin = require('firebase-admin');
                
                // Initialize Firebase Admin SDK if not already initialized
                if (!admin.apps.length) {
                  console.log('üîß Initializing Firebase Admin SDK...');
                  
                  // Parse the service account from environment variable
                  const serviceAccountString = process.env.VIBETOGETHER_FIREBASE_SA;
                  if (!serviceAccountString) {
                    throw new Error('VIBETOGETHER_FIREBASE_SA environment variable is not set');
                  }
                  
                  const serviceAccount = JSON.parse(serviceAccountString);
                  
                  // Validate required fields
                  if (!serviceAccount.project_id || !serviceAccount.private_key || !serviceAccount.client_email) {
                    throw new Error('Service account is missing required fields');
                  }
                  
                  admin.initializeApp({
                    credential: admin.credential.cert(serviceAccount)
                  });
                  
                  console.log('‚úÖ Firebase Admin SDK initialized successfully');
                }
                
                const firestore = admin.firestore();
                
                // Find implementations in the specified room that match this PR
                const implementationsRef = firestore.collection('rooms').doc(roomId).collection('implementations');
                  const querySnapshot = await implementationsRef.where('prUrl', '==', `https://github.com/${original_repo.join('/')}/pull/${pr_number}`).get();
                  
                  if (!querySnapshot.empty) {
                    // Update each matching implementation with the preview URL
                    const batch = firestore.batch();
                    querySnapshot.docs.forEach(doc => {
                      batch.update(doc.ref, {
                        previewChannelUrl: preview_url,
                        updatedAt: admin.firestore.FieldValue.serverTimestamp()
                      });
                    });
                    
                    await batch.commit();
                    console.log(`‚úÖ Updated ${querySnapshot.size} implementations with preview URL in room ${roomId}`);
                  } else {
                    console.log(`‚ö†Ô∏è No implementations found for PR ${pr_number} in room ${roomId}`);
                  }
                
              } catch (firestoreError) {
                console.log(`‚ö†Ô∏è Could not update Firestore with preview URL: ${firestoreError.message}`);
                // Don't fail the workflow for this
              }
            } else {
              console.log('‚ö†Ô∏è Room ID not provided, skipping Firestore update');
            }
            
            console.log('‚úÖ Preview deployment completed successfully!');
